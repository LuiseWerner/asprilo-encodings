
#program step(t).

 :-  serves(_,S,P,t), #count { 1,A : ordered(O,A), target(O,P), shelved(S,A) } = 0.

candiShelf(S) :- ordered(_,A), shelved(S,A).
 :- carries(_,S,t), not candiShelf(S).

 :-  serves(R,S,_,t), { pickup(R,S,  T') : T' < t, T' > 0 } = 0.
 :- putdown(R,S,  t), { serves(R,S,_,T') : T' < t, T' > 0 } = 0.	
 :- putdown(R,S,  t), { pickup(R,S,  T') : T' < t, T' > 0 } = 0.

%* >>> NOT YET ADAPTED <<<
%% :-  pickup(R,S,T), { deliver(R,P,T') : T' > T, carries(R,S,T'), time(T') } = 0.
#external      deliver(R,P,t+1) : isRobot(R), isStation(P).
#external deliverAfter(R,S,t+1) : isRobot(R), isShelf(S).
#external      carries(R,S,t+1) : isRobot(R), isShelf(S).

deliverAfter(R,S,t) :-      deliver(R,P,t+1), carries(R,S,t+1).
deliverAfter(R,S,t) :- deliverAfter(R,S,t+1).
:- pickup(R,S,t),  not deliverAfter(R,S,t  ).                                           % works because pickup cannot be last action ;)
*%

#external      putdown(R,S,t+1) : isRobot(R), isShelf(S).
#external putdownAfter(R,S,t+1) : isRobot(R), isShelf(S).

putdownAfter(R,S,t) :-      putdown(R,S,t+1).
putdownAfter(R,S,t) :- putdownAfter(R,S,t+1).

 :- serves(R,S,_,t), not putdownAfter(R,S,t).
 :- pickup(R,S,  t), not putdownAfter(R,S,t).
