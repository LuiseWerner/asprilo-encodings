#include <csp>. 

&dom{N..N} =   ordered(order(O),product(A),0) :- init(object(order,O),   value(line,(A,N))).
&dom{N..N} =   shelved(shelf(S),product(A),0) :- init(object(product,A), value(on,  (S,N))).

#program step(t).

&dom{0..N} =   ordered(order(O),product(A),t) :- init(object(order,O),   value(line,(A,N))).
&dom{0..N} =   shelved(shelf(S),product(A),t) :- init(object(product,A), value(on,  (S,N))).

&dom{0..N} = process(product(A),order(O),S,t) :- init(object(order,O),   value(line,(A,N))), shelved(S,product(A)).

 { process(A,O,S,t) : ordered(O,A), shelved(S,A) } 1. % process one article at a time at one processing station (via order)

:- process(_,O,S,t), target(O,P), not serves(_,S,P,t).
:- process(_,O,S,t), target(O,P),     serves(R,S,P,t), not waits(R,t).
:- process(A,O,S,t), &sum{ shelved(S,A,t-1); -process(A,O,S,t) } < 0.

:-     process(A,O,S,t), shelved(S,A),               &sum{  shelved(S,A,t); process(A,O,S,t) } != shelved(S,A,t-1).
:-     process(A,O,S,t),               ordered(O,A), &sum{  ordered(O,A,t); process(A,O,S,t) } != ordered(O,A,t-1).

:- not process(A,_,S,t), shelved(S,A),               &sum{  shelved(S,A,t)                   } != shelved(S,A,t-1).
:- not process(A,O,_,t),               ordered(O,A), &sum{  ordered(O,A,t)                   } != ordered(O,A,t-1).

:-     process(A,O,S,t),                             &sum{                  process(A,O,S,t) }  = 0.
:- not process(A,O,S,t), shelved(S,A), ordered(O,A), &sum{                  process(A,O,S,t) } != 0.
%*
:-                       shelved(S,A),               &sum{ shelved(S,A,t)                    }  > shelved(S,A,t-1).
:-                                     ordered(O,A), &sum{ ordered(O,A,t)                    }  > ordered(O,A,t-1).
*%
