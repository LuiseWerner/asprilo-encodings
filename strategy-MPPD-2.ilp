
#program step(t).

%% :-  pickup(R,t), { deliver(R,T') : T' > t, time(T') } = 0. % external chaining, see below
 :- deliver(R,t), {  pickup(R,T') : T' < t, T' > 0 } = 0.
%% :- deliver(R,t), { putdown(R,T') : T' > t, time(T') } = 0. % external chaining, see below
 :- putdown(R,t), { deliver(R,T') : T' < t, T' > 0 } = 0.	
%% :-    move(R,t), { deliver(R,T') : T'!= t, time(T') } = 0.

#external deliver(R,t+1)      : isRobot(R).
#external deliverAfter(R,t+1) : isRobot(R).
deliverAfter(R,t) :- deliver(R,t+1).
deliverAfter(R,t) :- deliverAfter(R,t+1).
:- pickup(R,t), not deliverAfter(R,t). % works because pickup cannot be last action ;)

#external putdown(R,t+1)      : isRobot(R).
#external putdownAfter(R,t+1) : isRobot(R).
putdownAfter(R,t) :- putdown(R,t+1).
putdownAfter(R,t) :- putdownAfter(R,t+1).
:- deliver(R,t), not putdownAfter(R,t). % works because pickup cannot be last action ;)
